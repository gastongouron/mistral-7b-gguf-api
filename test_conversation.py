#!/usr/bin/env python3
"""
Test du flux conversationnel complet avec Qwen2.5-32B
Simule une vraie conversation comme VoxImplant
Version corrig√©e sans bugs
"""

import asyncio
import websockets
import json
import time
import sys
from datetime import datetime
from typing import List, Dict, Optional

# Configuration
POD_ID = "6owx2sl5ef6dcy"
WS_URL = f"wss://{POD_ID}-8000.proxy.runpod.net/ws"
API_TOKEN = "supersecret"

# Le prompt syst√®me optimis√© pour Qwen
SYSTEM_PROMPT = """Tu es UNIQUEMENT une messagerie vocale automatique. NE JAMAIS donner de conseils m√©dicaux.

COLLECTE STRICTE dans cet ordre:
1. Nom de famille
2. Pr√©nom (APR√àS avoir confirm√© le nom)
3. Date de naissance compl√®te
4. Si d√©j√† patient (oui/non)
5. Praticien habituel (SEULEMENT si d√©j√† patient = oui)

R√àGLES ABSOLUES:
- Une seule question courte par message
- Pour l'orthographe des noms: "J'ai not√© [√©pellation], c'est correct ?"
- Apr√®s confirmation du nom, demander le pr√©nom dans un NOUVEAU message
- Ne JAMAIS r√©p√©ter une information d√©j√† collect√©e
- TOUJOURS utiliser des formulations neutres (pas de Monsieur/Madame)

GESTION DES INTERRUPTIONS:
- Si l'utilisateur dit "urgent" ou exprime de la douleur, r√©pondre: "J'ai bien not√© votre urgence. Puis-je avoir votre nom de famille ?"
- Ne pas se laisser d√©tourner du script de collecte

EXEMPLES STRICTS:
User: "Bonjour j'ai mal aux dents"
Toi: "Bonjour, j'ai bien not√© votre appel. Puis-je avoir votre nom de famille ?"

User: "Dupont"
Toi: "J'ai not√© D-U-P-O-N-T, c'est correct ?"

User: "Oui"
Toi: "Merci. Quel est votre pr√©nom ?"

User: "Marie"
Toi: "J'ai bien not√© Marie. Quelle est votre date de naissance compl√®te ?"

FIN OBLIGATOIRE:
Quand TOUTES les informations sont collect√©es, terminer EXACTEMENT par:
"Parfait, j'ai toutes les informations n√©cessaires. ##FIN_COLLECTE##"

IMPORTANT: Le marqueur ##FIN_COLLECTE## est OBLIGATOIRE √† la fin."""

# Sc√©narios de test
SCENARIOS = {
    "ideal": {
        "name": "Parcours id√©al",
        "intro": "Bonjour, j'ai mal aux dents depuis 3 jours",
        "responses": {
            "nom de famille": "Dubois",
            "c'est correct": "Oui c'est √ßa",
            "pr√©nom": "Marie",
            "date de naissance": "15 mars 1985",
            "d√©j√† patient": "Oui, je viens r√©guli√®rement",
            "praticien habituel": "Docteur Martin",
            "praticien": "Docteur Martin"
        },
        "expected_category": "appointment_create"
    },
    
    "interruption": {
        "name": "Avec interruptions",
        "intro": "Bonjour, j'ai une rage de dents terrible, c'est urgent !",
        "responses": {
            "nom de famille": "Durand",
            "bien not√©": "Mon nom c'est Durand",
            "j'ai bien not√© votre urgence": "Durand",
            "c'est correct": "Oui",
            "pr√©nom": "Pierre",
            "date de naissance": "12 juillet 1990",
            "d√©j√† patient": "Non c'est la premi√®re fois",
            "description": "C'est insupportable, ma joue est gonfl√©e, je pense que c'est un abc√®s"
        },
        "expected_category": "emergency"
    },
    
    "confus": {
        "name": "Patient confus",
        "intro": "Euh bonjour, je sais pas trop, j'ai un probl√®me avec mon rendez-vous",
        "responses": {
            "nom de famille": "Lefebvre",
            "besoin de votre nom": "Ah oui, Lefebvre",
            "pour pouvoir vous aider": "Lefebvre", 
            "l-e-f-e-b-v-r-e": "Non attendez, c'est Lef√®vre avec un accent",
            "l-e-f-√®-v-r-e": "Oui c'est √ßa",  # Accepter quand corrig√©
            "pr√©nom": "Sophie",
            "date de naissance": "28 f√©vrier 1978",
            "d√©j√† patient": "Je pense que oui, mais √ßa fait longtemps",
            "praticien": "Je ne me souviens plus de son nom",
            "rendez-vous": "Je voulais changer mon rendez-vous de la semaine prochaine"
        },
        "expected_category": "appointment_update"
    },
    
    "rapide": {
        "name": "Patient qui donne tout d'un coup",
        "intro": "Bonjour, Pierre Martin, j'ai rendez-vous demain mais je dois l'annuler",
        "responses": {
            "nom de famille": "Martin",
            "c'est correct": "Oui M-A-R-T-I-N",
            "pr√©nom": "Pierre",
            "date de naissance": "10 octobre 1980",
            "d√©j√† patient": "Bien s√ªr, j'ai rendez-vous demain avec Dr Moreau",
            "praticien": "Dr Moreau",
            "annuler": "Oui c'est √ßa, un impr√©vu professionnel"
        },
        "expected_category": "appointment_delete"
    },
    
    "certificat": {
        "name": "Demande de certificat",
        "intro": "Bonjour, j'ai besoin d'un certificat m√©dical pour mon travail",
        "responses": {
            "nom de famille": "Bernard",
            "c'est correct": "Oui",
            "pr√©nom": "Jean-Claude",
            "date de naissance": "15 juin 1965",
            "d√©j√† patient": "Oui, je suis patient du Dr Dubois",
            "praticien": "Dr Dubois",
            "certificat": "C'est pour une reprise du sport au travail"
        },
        "expected_category": "medical_certificate"
    }
}

class ConversationTester:
    def __init__(self, scenario_name: str):
        self.scenario = SCENARIOS[scenario_name]
        self.scenario_name = scenario_name
        self.websocket = None
        self.messages = []
        self.current_request_id = None
        self.response_buffer = ""
        self.conversation_complete = False
        self.test_results = {
            "scenario": scenario_name,
            "turns": 0,
            "errors": [],
            "fin_collecte_detected": False,
            "conversation": [],
            "expected_category": self.scenario.get("expected_category", "unknown")
        }
        # Tracker pour √©viter les boucles
        self.last_questions = []
    
    async def connect(self):
        """Se connecter au WebSocket"""
        uri = f"{WS_URL}?token={API_TOKEN}"
        print(f"üîå Connexion √† {uri}")
        self.websocket = await websockets.connect(uri)
        
        # Attendre le message de connexion
        conn_msg = await self.websocket.recv()
        msg = json.loads(conn_msg)
        if msg.get('type') == 'connection':
            print(f"‚úÖ Connect√© - Mod√®le: {msg.get('model')}")
            return True
        return False
    
    async def send_message(self, user_input: str):
        """Envoyer un message utilisateur avec config optimis√©e"""
        print(f"\nüë§ USER: {user_input}")
        self.test_results["conversation"].append({"role": "user", "content": user_input})
        
        # Ajouter le message √† l'historique
        self.messages.append({
            "role": "user",
            "content": user_input
        })
        
        # Construire la requ√™te
        self.current_request_id = f"test_{int(time.time() * 1000)}"
        
        # Pour Qwen, toujours inclure le syst√®me prompt
        messages_to_send = []
        
        # Toujours commencer par le syst√®me
        messages_to_send.append({
            "role": "system",
            "content": SYSTEM_PROMPT
        })
        
        # Ajouter l'historique de conversation
        messages_to_send.extend(self.messages)
        
        # Configuration optimis√©e pour suivre les instructions
        payload = {
            "request_id": self.current_request_id,
            "messages": messages_to_send,
            "temperature": 0.01,  # Tr√®s bas pour suivre le script
            "max_tokens": 60,     # Limit√© pour √©viter les digressions
            "top_p": 0.1,         # Tr√®s focalis√©
            "top_k": 10,          # Limiter les choix
            "repetition_penalty": 1.15  # √âviter les r√©p√©titions
        }
        
        await self.websocket.send(json.dumps(payload))
        
        # Attendre et collecter la r√©ponse
        self.response_buffer = ""
        response_complete = False
        
        while not response_complete:
            try:
                message = await asyncio.wait_for(self.websocket.recv(), timeout=10.0)
                msg = json.loads(message)
                
                if msg.get('type') == 'stream_start':
                    continue
                    
                elif msg.get('type') == 'stream_token' and msg.get('request_id') == self.current_request_id:
                    self.response_buffer += msg.get('token', '')
                    
                elif msg.get('type') == 'stream_end' and msg.get('request_id') == self.current_request_id:
                    response_complete = True
                    
            except asyncio.TimeoutError:
                self.test_results["errors"].append("Timeout en attendant la r√©ponse")
                break
        
        # Nettoyer la r√©ponse
        assistant_response = self.response_buffer.strip()
        
        # V√©rifier si FIN_COLLECTE
        if "##FIN_COLLECTE##" in assistant_response:
            self.test_results["fin_collecte_detected"] = True
            self.conversation_complete = True
            # Ne pas enlever le marqueur pour l'analyse
        
        # Ajouter √† l'historique
        self.messages.append({
            "role": "assistant",
            "content": assistant_response
        })
        
        print(f"ü§ñ ASSISTANT: {assistant_response}")
        self.test_results["conversation"].append({"role": "assistant", "content": assistant_response})
        self.test_results["turns"] += 1
        
        # Tracker les questions pour d√©tecter les boucles
        self.last_questions.append(assistant_response.lower())
        if len(self.last_questions) > 3:
            self.last_questions.pop(0)
        
        return assistant_response
    
    def find_best_response(self, assistant_message: str) -> Optional[str]:
        """Trouve la meilleure r√©ponse du sc√©nario bas√©e sur le message de l'assistant"""
        assistant_lower = assistant_message.lower()
        
        # D√©tection sp√©cifique par type de question
        if "nom de famille" in assistant_lower:
            return self.scenario["responses"].get("nom de famille", "Dubois")
        
        elif "c'est correct" in assistant_lower:
            # V√©rifier le contexte exact
            if "l-e-f-√®-v-r-e" in assistant_lower:
                # C'est la version corrig√©e avec accent
                return self.scenario["responses"].get("l-e-f-√®-v-r-e", "Oui")
            elif "l-e-f-e-b-v-r-e" in assistant_lower:
                # C'est la version sans accent
                return self.scenario["responses"].get("l-e-f-e-b-v-r-e", "Non, avec un accent sur le √®")
            elif "pr√©nom" in assistant_lower:
                # Le mod√®le redemande car il a d√©tect√© une erreur
                return self.scenario["responses"].get("pr√©nom", "Marie")
            else:
                return self.scenario["responses"].get("c'est correct", "Oui")
        
        elif "pr√©nom" in assistant_lower:
            # Si le mod√®le insiste pour le pr√©nom, donner un pr√©nom diff√©rent
            if len(self.last_questions) >= 2 and all("pr√©nom" in q for q in self.last_questions[-2:]):
                # On est dans une boucle, forcer une r√©ponse diff√©rente
                return "Marie" if self.scenario_name != "ideal" else "Sophie"
            return self.scenario["responses"].get("pr√©nom", "Marie")
        
        elif "date de naissance" in assistant_lower or "date naissance" in assistant_lower:
            return self.scenario["responses"].get("date de naissance", "15 mars 1985")
        
        elif "d√©j√† patient" in assistant_lower or "patient ici" in assistant_lower or "√™tes-vous d√©j√†" in assistant_lower:
            return self.scenario["responses"].get("d√©j√† patient", "Oui")
        
        elif "praticien" in assistant_lower:
            return self.scenario["responses"].get("praticien", 
                   self.scenario["responses"].get("praticien habituel", "Dr Martin"))
        
        elif "j'ai bien not√© votre urgence" in assistant_lower or "bien not√© votre urgence" in assistant_lower:
            # Pour le sc√©nario interruption
            return self.scenario["responses"].get("j'ai bien not√© votre urgence",
                   self.scenario["responses"].get("bien not√©", "Durand"))
        
        elif "pour pouvoir vous aider" in assistant_lower:
            # Pour le sc√©nario confus
            return self.scenario["responses"].get("pour pouvoir vous aider", "Lefebvre")
        
        # Fallback: chercher par mots-cl√©s
        best_match = None
        best_score = 0
        
        for trigger, response in self.scenario["responses"].items():
            trigger_words = trigger.lower().split()
            matches = sum(1 for word in trigger_words if word in assistant_lower)
            
            if matches > best_score:
                best_score = matches
                best_match = response
        
        return best_match
    
    async def run_scenario(self):
        """Ex√©cuter le sc√©nario complet"""
        print(f"\n{'='*60}")
        print(f"SC√âNARIO: {self.scenario['name']}")
        print(f"Cat√©gorie attendue: {self.scenario.get('expected_category', 'unknown')}")
        print(f"{'='*60}")
        
        try:
            # Se connecter
            if not await self.connect():
                self.test_results["errors"].append("√âchec de connexion")
                return
            
            # Envoyer le message d'introduction
            response = await self.send_message(self.scenario["intro"])
            
            # Boucle de conversation
            max_turns = 20  # Un peu plus pour laisser le mod√®le finir
            turn = 0
            
            while not self.conversation_complete and turn < max_turns:
                turn += 1
                
                # Trouver la meilleure r√©ponse
                user_response = self.find_best_response(response)
                
                if not user_response:
                    # R√©ponse de fallback intelligente
                    print(f"‚ö†Ô∏è  Pas de r√©ponse trouv√©e pour: {response[:50]}...")
                    user_response = "Je ne comprends pas la question"
                
                # Petite pause pour simuler un humain
                await asyncio.sleep(0.5)
                
                # Envoyer la r√©ponse
                response = await self.send_message(user_response)
            
            if turn >= max_turns and not self.conversation_complete:
                self.test_results["errors"].append(f"Conversation trop longue ({max_turns} tours)")
            
        except Exception as e:
            self.test_results["errors"].append(f"Erreur: {str(e)}")
        
        finally:
            if self.websocket:
                await self.websocket.close()
    
    def print_results(self):
        """Afficher les r√©sultats du test"""
        print(f"\n{'='*60}")
        print("R√âSULTATS DU TEST")
        print(f"{'='*60}")
        
        print(f"Sc√©nario: {self.test_results['scenario']}")
        print(f"Tours de conversation: {self.test_results['turns']}")
        print(f"FIN_COLLECTE d√©tect√©: {'‚úÖ OUI' if self.test_results['fin_collecte_detected'] else '‚ùå NON'}")
        print(f"Cat√©gorie attendue: {self.test_results['expected_category']}")
        
        if self.test_results["errors"]:
            print(f"\nERREURS ({len(self.test_results['errors'])}):")
            for error in self.test_results["errors"]:
                print(f"  - {error}")
        
        # Analyser la conversation
        print("\nANALYSE:")
        collected_info = {
            "nom": False,
            "pr√©nom": False,
            "date_naissance": False,
            "d√©j√†_patient": False,
            "praticien": False,
            "motif": False
        }
        
        questions_asked = {
            "nom": False,
            "pr√©nom": False,
            "date_naissance": False,
            "d√©j√†_patient": False,
            "praticien": False
        }
        
        # Analyser les questions pos√©es
        for msg in self.test_results["conversation"]:
            if msg["role"] == "assistant":
                content_lower = msg["content"].lower()
                if "nom de famille" in content_lower:
                    questions_asked["nom"] = True
                if "pr√©nom" in content_lower:
                    questions_asked["pr√©nom"] = True
                if "date de naissance" in content_lower or "date naissance" in content_lower:
                    questions_asked["date_naissance"] = True
                if "patient" in content_lower and ("d√©j√†" in content_lower or "√™tes-vous" in content_lower):
                    questions_asked["d√©j√†_patient"] = True
                if "praticien" in content_lower:
                    questions_asked["praticien"] = True
        
        # Analyser les r√©ponses donn√©es
        for i, msg in enumerate(self.test_results["conversation"]):
            if msg["role"] == "user":
                content_lower = msg["content"].lower()
                # V√©rifier le contexte de la question pr√©c√©dente
                prev_assistant = None
                if i > 0:
                    prev_assistant = self.test_results["conversation"][i-1]["content"].lower()
                
                # Nom
                if any(nom in content_lower for nom in ["dubois", "durand", "lefebvre", "martin", "bernard"]):
                    if not prev_assistant or "pr√©nom" not in prev_assistant:
                        collected_info["nom"] = True
                
                # Pr√©nom
                if any(prenom in content_lower for prenom in ["marie", "pierre", "sophie", "jean-claude", "sophia"]):
                    if prev_assistant and "pr√©nom" in prev_assistant:
                        collected_info["pr√©nom"] = True
                
                # Date naissance
                if any(year in content_lower for year in ["1985", "1990", "1978", "1980", "1965"]):
                    collected_info["date_naissance"] = True
                
                # D√©j√† patient
                if prev_assistant and "patient" in prev_assistant:
                    if "oui" in content_lower or "non" in content_lower:
                        collected_info["d√©j√†_patient"] = True
                
                # Praticien
                if ("docteur" in content_lower or "dr" in content_lower) and prev_assistant and "praticien" in prev_assistant:
                    collected_info["praticien"] = True
                
                # Motif
                if i < 2:  # G√©n√©ralement dans les premiers messages
                    if any(word in content_lower for word in ["mal", "douleur", "urgent", "rdv", "rendez-vous", "certificat", "abc√®s"]):
                        collected_info["motif"] = True
        
        print("\nQuestions pos√©es:")
        for info, asked in questions_asked.items():
            status = "‚úÖ" if asked else "‚ùå"
            print(f"  {status} {info}")
        
        print("\nInformations collect√©es:")
        for info, collected in collected_info.items():
            status = "‚úÖ" if collected else "‚ùå"
            print(f"  {status} {info}")
        
        # Score
        questions_score = sum(1 for asked in questions_asked.values() if asked)
        info_score = sum(1 for collected in collected_info.values() if collected)
        print(f"\nScores:")
        print(f"  Questions: {questions_score}/5")
        print(f"  Informations: {info_score}/6")
        
        # √âvaluation
        if self.test_results["fin_collecte_detected"] and info_score >= 5:
            print("\n‚úÖ TEST R√âUSSI - Le syst√®me a collect√© les informations et termin√© correctement")
        elif info_score >= 4:
            print("\n‚ö†Ô∏è  TEST PARTIEL - Bonnes informations mais pas de fin d√©tect√©e")
        else:
            print("\n‚ùå TEST √âCHOU√â - Informations manquantes ou comportement incorrect")

async def main():
    """Ex√©cuter tous les tests"""
    print(f"Test du flux conversationnel Qwen2.5-32B")
    print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"WebSocket: {WS_URL}")
    
    # Choix du sc√©nario
    if len(sys.argv) > 1 and sys.argv[1] in SCENARIOS:
        scenarios_to_test = [sys.argv[1]]
    else:
        print("\nSc√©narios disponibles:")
        for name, scenario in SCENARIOS.items():
            print(f"  - {name}: {scenario['name']} ‚Üí {scenario.get('expected_category', '?')}")
        print(f"\nUtilisation: python {sys.argv[0]} [scenario_name]")
        print("Ex√©cution de tous les sc√©narios...\n")
        scenarios_to_test = list(SCENARIOS.keys())
    
    # Ex√©cuter les tests
    all_results = []
    
    for scenario_name in scenarios_to_test:
        tester = ConversationTester(scenario_name)
        await tester.run_scenario()
        tester.print_results()
        
        all_results.append({
            "scenario": scenario_name,
            "success": tester.test_results["fin_collecte_detected"],
            "turns": tester.test_results["turns"],
            "errors": len(tester.test_results["errors"]),
            "expected_category": tester.test_results["expected_category"]
        })
        
        # Pause entre les sc√©narios
        if scenario_name != scenarios_to_test[-1]:
            print("\nPause de 3 secondes avant le prochain sc√©nario...")
            await asyncio.sleep(3)
    
    # R√©sum√© global
    if len(all_results) > 1:
        print(f"\n{'='*60}")
        print("R√âSUM√â GLOBAL")
        print(f"{'='*60}")
        
        for result in all_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['scenario']}: {result['turns']} tours, {result['errors']} erreurs ‚Üí {result['expected_category']}")
        
        success_rate = sum(1 for r in all_results if r["success"]) / len(all_results) * 100
        print(f"\nTaux de r√©ussite: {success_rate:.0f}%")

if __name__ == "__main__":
    asyncio.run(main())